{
  "swagger": "2.0",
  "schemes": [
    "http",
    "https"
  ],
  "host": "cogni-api.herokuapp.com",
  "basePath": "/",
  "info": {
    "description": "CogniAPI aims to provide you a simpler and more straightforward way to analyse and process images content expoiting the power of Azure and Google Cloud cognitive services\n# Introduction\nThis specification is intended to to be a good starting point for describing CogniAPI in \n[OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\n\n# CogniAPI Specification\nThe goal of The CogniAPI Specification is to guide you to the use of a less intricate but very useful REST service for image analysis which could be applied in many cases. Exploiting the power of Azure Computer Vision, Azure Face and Google Cloud Vision, this APIs will try to provide all the results to you in a unified and more straightforward schema. The properties provided to you could be resume in the following list:\n\n  * Retrieving tags which tries to condensate the image content in a set of words\n  * Detecting objects, locations and people of interest\n  * Detecting faces (with emotions, gender, age and additional attributes related to them)\n  * Evaluating the presence of inappropriate content in the image (racy, adult, violence, ...)\n  * Complete analysis of the colors and other graphical aspects which characterize the image\n",
    "version": "1.0.0",
    "title": "CogniAPI",
    "termsOfService": "https://cogni-api.herokuapp.com/terms/",
    "contact": {
      "email": "devis.dalmoro@studenti.unitn.it"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/devis12/CogniAPI/blob/master/LICENSE"
    },
    "x-logo": {
      "url": "https://github.com/devis12/CogniAPI/blob/master/views/img/logo.png"
    }
  },
  "externalDocs": {
    "description": "Find out how to create Github repo for your OpenAPI spec.",
    "url": "https://github.com/Rebilly/generator-openapi-repo"
  },
  "produces": [
    "application/json",
    "text/plain"
  ],
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication operations"
    },
    {
      "name": "Analyse",
      "description": "Image Analysis operations provided by CogniAPI"
    },
    {
      "name": "AsyncAnalyse",
      "description": "Image Async Analysis operations provided by CogniAPI"
    },
    {
      "name": "GCloud",
      "description": "Image Analysis operations provided just by Google Cloud Vision"
    },
    {
      "name": "Azure",
      "description": "Image Analysis operations provided just by Azure Computer Vision and Azure Face"
    }
  ],
  "paths": {
    "/auth": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Authentication with Google",
        "description": "This call will provide a token (after authenticating with Google) which could be used in order to authenticate yourself when you call other CogniAPI services to offer you more interesting and complete features\n",
        "operationId": "auth",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/analyse": {
      "parameters": [
        {
          "in": "header",
          "name": "UserToken",
          "type": "string",
          "required": false,
          "description": "Optional token which can be used to identify the logged user and to provide additional features (use /auth in order to get one)"
        },
        {
          "in": "query",
          "name": "utoken",
          "type": "string",
          "required": false,
          "description": "Optional token which can be used to identify the logged user and to provide additional features (use /auth in order to get one)"
        }
      ],
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Complete image analysis",
        "description": "This call will probably be the most useful since it combines in a \nsingle response all the valuable information extracted from the cognitive services mentioned above and show them in a unified schema\n",
        "operationId": "analyse",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImageAnnotation"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/faces": {
      "parameters": [
        {
          "in": "header",
          "name": "UserToken",
          "type": "string",
          "required": false,
          "description": "Optional token which can be used to identify the logged user and to provide additional features (use /auth in order to get one)"
        },
        {
          "in": "query",
          "name": "utoken",
          "type": "string",
          "required": false,
          "description": "Optional token which can be used to identify the logged user and to provide additional features (use /auth in order to get one)"
        }
      ],
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Description of image content",
        "description": "This call will provide a full face detection and recogntion of the image (the second one will be performed just if the user is logged)\n",
        "operationId": "analyseFace",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Face"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/tags": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Image tag analysis",
        "description": "This call provides just tag and labels, respect to what it's possible to obtain with a full and complete /analyse call\n",
        "operationId": "analyseTag",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/objects": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Image objects detection",
        "description": "This call provides just detected objects, respect to what it's possible to obtain with a full and complete /analyse call\n",
        "operationId": "analyseObject",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/description": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Description of image content",
        "description": "This call provides a brief description of the image content: there will be a bunch of generic tags, grouped by concept, some captions and a classification based on a 86 category taxonomy defined here https://docs.microsoft.com/en-us/azure/cognitive-services/Computer-vision/category-taxonomy\n",
        "operationId": "analyseDescription",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Description"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/texts": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Text detection of supplied the image",
        "description": "This call will return the text which has been detected inside the image\n",
        "operationId": "analyseText",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Text"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/landmarks": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Landmark detection of supplied the image",
        "description": "This call will return the text which has been detected inside the image\n",
        "operationId": "analyseLandmarks",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Landmark"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/safety": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Safety tags annotation of supplied the image",
        "description": "This call will return the text which has been detected inside the image\n",
        "operationId": "analyseSafety",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SafetyAnnotation"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/analyse/colors": {
      "get": {
        "tags": [
          "Analyse"
        ],
        "summary": "Color analysis of image content",
        "description": "This call provides a complete analysis of the image colors \n",
        "operationId": "analyseColor",
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "type": "string",
            "required": true,
            "description": "Link of the image which has to be analysed"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GraphicalData"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    }
  },
  "definitions": {
    "Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "This has to be used in the header (UserToken: Bearer <token>) or in the url as url?utoken=<token> as a way to allow the APIs to recognize the logged user"
        }
      }
    },
    "Point2d": {
      "type": "object",
      "properties": {
        "x": {
          "description": "X coordinate in px",
          "type": "integer"
        },
        "y": {
          "description": "Y coordinate in px",
          "type": "integer"
        }
      }
    },
    "Point3d": {
      "type": "object",
      "properties": {
        "x": {
          "description": "X coordinate in px",
          "type": "integer"
        },
        "y": {
          "description": "Y coordinate in px",
          "type": "integer"
        },
        "z": {
          "description": "Z coordinate in px (depth in an image)",
          "type": "integer"
        }
      }
    },
    "BoundingBox": {
      "type": "object",
      "properties": {
        "width": {
          "description": "Width dimension in px of the rectangle box",
          "type": "integer"
        },
        "height": {
          "description": "Height dimension in px of the rectangle box",
          "type": "integer"
        },
        "bl": {
          "$ref": "#/definitions/Point2d"
        },
        "br": {
          "$ref": "#/definitions/Point2d"
        },
        "tl": {
          "$ref": "#/definitions/Point2d"
        },
        "tr": {
          "$ref": "#/definitions/Point2d"
        }
      }
    },
    "Exposure": {
      "type": "object",
      "properties": {
        "exposureLevel": {
          "description": "Face exposure level",
          "type": "string",
          "enum": [
            "GoodExposure",
            "OverExposure",
            "UnderExposure"
          ]
        },
        "value": {
          "description": "Level of exposure expressed as a value between 0 and 1",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "underExposedLikelihood": {
          "description": "Google Cloud Likelihood value in order to express the level of exposure",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY, POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        }
      }
    },
    "Blur": {
      "type": "object",
      "properties": {
        "blurLevel": {
          "description": "Blur level",
          "type": "string",
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "Level of blur expressed as a value between 0 and 1",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "blurredLikelihood": {
          "description": "Google Cloud Likelihood value in order to express the level of blurriness",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY, POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        }
      }
    },
    "Noise": {
      "type": "object",
      "properties": {
        "noiseLevel": {
          "description": "Noise level of face pixels",
          "type": "string",
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "Level of noise of face pixels expressed as a value between 0 and 1",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "Occlusion": {
      "type": "object",
      "properties": {
        "eyeMakeup": {
          "description": "True if the eye(s) is(are) detected with makeup on it(them)",
          "type": "boolean"
        },
        "lipMakeup": {
          "description": "True if the lip(s) has(have) makeup on it(them)",
          "type": "boolean"
        }
      }
    },
    "Makeup": {
      "type": "object",
      "properties": {
        "foreheadOccluded": {
          "description": "True if the forehead is occluded",
          "type": "boolean"
        },
        "eyeOccluded": {
          "description": "True if the eye(s) is(are) occluded",
          "type": "boolean"
        },
        "mouthOccluded": {
          "description": "True if the mouth is occluded",
          "type": "boolean"
        }
      }
    },
    "Accessory": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Denomination of the type of identified accessory",
          "type": "string",
          "example": "headwear"
        },
        "confidence": {
          "description": "Probability value between 0 and 1 in order to express the confidence of the presence of the identified object",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "Emotion": {
      "type": "object",
      "properties": {
        "confidence": {
          "description": "Probability value between 0 and 1 in order to express the confidence of the presence of the identified object",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "confidenceLabel": {
          "description": "Google Cloud Likelihood value in order to express the level of blurriness",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY, POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        }
      }
    },
    "HeadPose": {
      "type": "object",
      "properties": {
        "rollAngle": {
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]",
          "type": "number",
          "minimum": -180,
          "maximum": 180
        },
        "panAngle": {
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "type": "number",
          "minimum": -180,
          "maximum": 180
        },
        "tiltAngle": {
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "type": "number",
          "minimum": -180,
          "maximum": 180
        }
      }
    },
    "Hair": {
      "type": "object",
      "properties": {
        "invisible": {
          "description": "Indicate if the hair are visible or not",
          "type": "boolean"
        },
        "bald": {
          "description": "Indicate level of baldness as a value between 0 and 1",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "hairColors": {
          "description": "Possible colors of the detected hair for the face",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HairColor"
          }
        }
      }
    },
    "HairColor": {
      "type": "object",
      "properties": {
        "color": {
          "description": "Possible color for the hair",
          "type": "string",
          "example": "Brown"
        },
        "confidence": {
          "description": "Confidence value for this hair color expressed as a value between 0 and 1",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "FacialHair": {
      "type": "object",
      "properties": {
        "moustache": {
          "description": "Indicate if it's been detected a moustache in the face",
          "type": "boolean"
        },
        "beard": {
          "description": "Indicate if it's been detected a beard in the face",
          "type": "boolean"
        },
        "sideburns": {
          "description": "Indicate if it's been detected a sideburns in the face",
          "type": "boolean"
        }
      }
    },
    "PersistedFace": {
      "type": "object",
      "properties": {
        "persistedFaceId": {
          "description": "Persisted Face Id on Azure in the Face List Group related to the logged user",
          "type": "string"
        },
        "persistedUserData": {
          "description": "User Data linked to the persisted Face Id on Azure in the Face List Group related to the logged user (and provided by him/her in the first place)",
          "type": "string"
        },
        "confidence": {
          "description": "Level of similarity of this persisted face in respect to the one which has been just detected",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "FaceLandmarksAnnotation": {
      "type": "object",
      "properties": {
        "UNKNOWN_LANDMARK": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYE": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYE": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_OF_LEFT_EYEBROW": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_OF_LEFT_EYEBROW": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_OF_RIGHT_EYEBROW": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_OF_RIGHT_EYEBROW": {
          "$ref": "#/definitions/Point3d"
        },
        "MIDPOINT_BETWEEN_EYES": {
          "$ref": "#/definitions/Point3d"
        },
        "NOSE_TIP": {
          "$ref": "#/definitions/Point3d"
        },
        "UPPER_LIP": {
          "$ref": "#/definitions/Point3d"
        },
        "LOWER_LIP": {
          "$ref": "#/definitions/Point3d"
        },
        "MOUTH_LEFT": {
          "$ref": "#/definitions/Point3d"
        },
        "MOUTH_RIGHT": {
          "$ref": "#/definitions/Point3d"
        },
        "MOUTH_CENTER": {
          "$ref": "#/definitions/Point3d"
        },
        "NOSE_BOTTOM_RIGHT": {
          "$ref": "#/definitions/Point3d"
        },
        "NOSE_BOTTOM_LEFT": {
          "$ref": "#/definitions/Point3d"
        },
        "NOSE_BOTTOM_CENTER": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYE_TOP_BOUNDARY": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYE_RIGHT_CORNER": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYE_BOTTOM_BOUNDARY": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYE_LEFT_CORNER": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYE_TOP_BOUNDARY": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYE_RIGHT_CORNER": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYE_BOTTOM_BOUNDARY": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYE_LEFT_CORNER": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYEBROW_UPPER_MIDPOINT": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYEBROW_UPPER_MIDPOINT": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EAR_TRAGION": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EAR_TRAGION": {
          "$ref": "#/definitions/Point3d"
        },
        "LEFT_EYE_PUPIL": {
          "$ref": "#/definitions/Point3d"
        },
        "RIGHT_EYE_PUPIL": {
          "$ref": "#/definitions/Point3d"
        },
        "FOREHEAD_GLABELLA": {
          "$ref": "#/definitions/Point3d"
        },
        "CHIN_GNATHION": {
          "$ref": "#/definitions/Point3d"
        },
        "CHIN_LEFT_GONION": {
          "$ref": "#/definitions/Point3d"
        },
        "CHIN_RIGHT_GONION": {
          "$ref": "#/definitions/Point3d"
        }
      }
    },
    "TagNoBound": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Concept, object, logo, celebrity name",
          "type": "string"
        },
        "confidence": {
          "description": "Level of confidence for the detected concept, logo, object, celebrity",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Concept, object, logo, celebrity name",
          "type": "string"
        },
        "confidence": {
          "description": "Level of confidence for the detected concept, logo, object, celebrity",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        }
      }
    },
    "Text": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content for the detected text",
          "type": "string"
        },
        "confidence": {
          "description": "Level of confidence in relation to the presence of the detected text",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        }
      }
    },
    "Landmark": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the detected landmark",
          "type": "string"
        },
        "confidence": {
          "description": "Level of confidence in relation to the presence of the detected landmark",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "latitude": {
          "description": "Latitude coordinate for the detected landmark",
          "type": "number",
          "minimum": -90,
          "maximum": 90
        },
        "longitude": {
          "description": "Longitude coordinate for the detected landmark",
          "type": "number",
          "minimum": -180,
          "maximum": 180
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        }
      }
    },
    "Description": {
      "type": "object",
      "properties": {
        "generic_tags": {
          "description": "Array of generic tags related to the uploaded image (grouped in lists by common concepts)",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "captions": {
          "description": "Brief sentences which aims to synthesize the content of the image",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagNoBound"
          }
        },
        "categories": {
          "description": "Most of the time just a single word which aims to synthesize the content of the image. All the values are limited to an 86 taxonomy defined by Azure Computer Vision at https://docs.microsoft.com/en-us/azure/cognitive-services/Computer-vision/category-taxonomy",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagNoBound"
          }
        }
      }
    },
    "RGBA": {
      "type": "object",
      "properties": {
        "r": {
          "description": "Red value for rgba",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        },
        "g": {
          "description": "Green value for rgba",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        },
        "b": {
          "description": "Blue value for rgba",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        },
        "a": {
          "description": "Alpha value",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "ColorInfoRGBA": {
      "type": "object",
      "properties": {
        "pixelFraction": {
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1]",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "confidence": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "rgba": {
          "description": "RGBA value for this color",
          "$ref": "#/definitions/RGBA"
        }
      }
    },
    "GraphicalData": {
      "type": "object",
      "properties": {
        "dominantColorForeground": {
          "description": "The dominant color in the foreground",
          "type": "string"
        },
        "dominantColorBackground": {
          "description": "The dominant color in the background",
          "type": "string"
        },
        "dominantColors": {
          "description": "The dominant colors for the image",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accentColor": {
          "description": "Accent color detected for the current image",
          "type": "string"
        },
        "isBWImg": {
          "description": "True if the image is in black and white",
          "type": "boolean"
        },
        "clipArtType": {
          "description": "Integer value between 0 and 3 in order to define how much this image is similar to a clipart",
          "type": "integer",
          "minimum": 0,
          "maximum": 3
        },
        "lineDrawingType": {
          "description": "True if the image content is detected as drawn by a human",
          "type": "boolean"
        },
        "colorInfoRGBA": {
          "description": "Color Info with rgba values and px fraction",
          "$ref": "#/definitions/ColorInfoRGBA"
        }
      }
    },
    "SafetyProperty": {
      "type": "object",
      "properties": {
        "present": {
          "description": "True if the content of the image confirm the presence of this property (property 'racy' and present=True, it means that the content has a highly probability of been racist)",
          "type": "boolean"
        },
        "confidence": {
          "description": "Confidence value expressed as a value between 0 and 1 for this safety property",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "label": {
          "description": "Confidence value expressed as a value between 0 and 1 for this safety property",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "confidenceLabel": {
          "description": "Confidence value expressed as the likelihood label offered by Google Cloud Vision",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY, POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        }
      }
    },
    "SafetyAnnotation": {
      "type": "object",
      "properties": {
        "racy": {
          "$ref": "#/definitions/SafetyProperty"
        },
        "adult": {
          "$ref": "#/definitions/SafetyProperty"
        },
        "violence": {
          "$ref": "#/definitions/SafetyProperty"
        },
        "medical": {
          "$ref": "#/definitions/SafetyProperty"
        },
        "spoof": {
          "$ref": "#/definitions/SafetyProperty"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "width": {
          "description": "Pixel width for the analyzed picture",
          "type": "integer"
        },
        "height": {
          "description": "Pixel height for the analyzed picture",
          "type": "integer"
        },
        "format": {
          "description": "Format of the analyzed picture",
          "type": "string"
        }
      }
    },
    "Face": {
      "type": "object",
      "properties": {
        "faceId": {
          "description": "faceId randomly generated by Azure Face (will expire in 24 hours)",
          "type": "string"
        },
        "gender": {
          "description": "Recognized gender",
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "age": {
          "description": "Recognized age value",
          "type": "integer"
        },
        "smile": {
          "description": "Smile intensity, a number between [0,1]",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "glasses": {
          "description": "Glasses type",
          "type": "string",
          "enum": [
            "NoGlasses",
            "ReadingGlasses",
            "Sunglasses",
            "SwimmingGoggles"
          ]
        },
        "faceRectangle": {
          "$ref": "#/definitions/BoundingBox"
        },
        "landmarks": {
          "$ref": "#/definitions/FaceLandmarksAnnotation"
        },
        "similarFaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersistedFace"
          }
        },
        "celebrity": {
          "description": "Tag present if it is the face of a recognized celebrity",
          "$ref": "#/definitions/TagNoBound"
        },
        "facialHair": {
          "$ref": "#/definitions/FacialHair"
        },
        "hair": {
          "$ref": "#/definitions/Hair"
        },
        "headPose": {
          "$ref": "#/definitions/HeadPose"
        },
        "emotions": {
          "type": "object",
          "properties": {
            "anger": {
              "$ref": "#/definitions/Emotion"
            },
            "contempt": {
              "$ref": "#/definitions/Emotion"
            },
            "disgust": {
              "$ref": "#/definitions/Emotion"
            },
            "fear": {
              "$ref": "#/definitions/Emotion"
            },
            "happiness": {
              "$ref": "#/definitions/Emotion"
            },
            "neutral": {
              "$ref": "#/definitions/Emotion"
            },
            "sadness": {
              "$ref": "#/definitions/Emotion"
            },
            "surprise": {
              "$ref": "#/definitions/Emotion"
            }
          }
        },
        "makeup": {
          "$ref": "#/definitions/Makeup"
        },
        "occlusion": {
          "$ref": "#/definitions/Occlusion"
        },
        "accessories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accessory"
          }
        },
        "noise": {
          "$ref": "#/definitions/Noise"
        },
        "blur": {
          "$ref": "#/definitions/Blur"
        },
        "exposure": {
          "$ref": "#/definitions/Exposure"
        }
      }
    },
    "ImageAnnotation": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "texts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Text"
          }
        },
        "landmarks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Landmark"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "description": {
          "$ref": "#/definitions/Description"
        },
        "graphicalData": {
          "$ref": "#/definitions/GraphicalData"
        },
        "faces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Face"
          }
        },
        "safetyAnnotations": {
          "$ref": "#/definitions/SafetyAnnotation"
        }
      }
    }
  }
}
